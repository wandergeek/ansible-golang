---
- name: Register the current Go version (if any)
  command: /usr/local/go/bin/go version
  ignore_errors: yes
  register: go_version

- name: Install zip if not available
  apt: name=zip update_cache=yes
  when: go_version|failed or go_version.stdout != go_version_target

- name: Download the Go tarball
  get_url: url={{ go_download_location }}
           dest=/usr/local/src/{{ go_tarball }}
           sha256sum={{ go_tarball_checksum }}
  when: go_version|failed or go_version.stdout != go_version_target

- name: Extract the Go tarball
  command: tar -C /usr/local -xf /usr/local/src/{{ go_tarball }}
  when: go_version|failed or go_version.stdout != go_version_target

- name: Compile Go
  shell: cd /usr/local/go/src && ./all.bash
  when: go_version|failed or go_version.stdout != go_version_target

- name: Add Go to PATH
  copy:
    content: "export PATH=$PATH:/usr/local/go/bin"
    dest: /etc/profile.d/golang.sh

- name: Download cross compile tools
  get_url: url={{ cctools_pkg_url }}
           dest=/usr/local/go/misc/master.zip
  when: go_version|failed or go_version.stdout != go_version_target

- name: Extracting cross compile tools
  command: unzip -o -d /usr/local/go/misc /usr/local/go/misc/master.zip
  when: go_version|failed or go_version.stdout != go_version_target

- name: Remove zip file
  command: rm /usr/local/go/misc/master.zip
  when: go_version|failed or go_version.stdout != go_version_target

- name: Build Go cross compile environment
  shell: bash -c "source /etc/profile.d/golang.sh && cd /usr/local/go && source ./misc/golang-crosscompile-master/crosscompile.bash && go-crosscompile-build-all"
  when: go_version|failed or go_version.stdout != go_version_target
